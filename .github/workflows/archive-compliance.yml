name: Archive License Compliance

on:
  push:
    branches: [ archive/cloudflare-launchpad ]
  pull_request:
    branches: [ archive/cloudflare-launchpad ]
  schedule:
    # Run weekly on Sundays at 3 AM UTC (offset from main branch scan)
    - cron: '0 3 * * 0'

jobs:
  license-scan:
    name: Strict License Scan for Archive
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      # Verify no BSL components exist
      - name: Check for BSL components
        run: |
          if [ -d "packages/fingerprinting" ]; then
            echo "‚ùå ERROR: BSL fingerprinting package found in archive branch"
            echo "Archive branch should contain only Apache-2.0 components"
            exit 1
          fi
          
          echo "‚úÖ No BSL packages found in packages/ directory"

      # Check for BSL references in source code (not docs/workflows)
      - name: Check for BSL in source code
        run: |
          echo "üîç Checking for BSL references in source code..."
          
          # Check package.json files for BSL license
          BSL_PACKAGES=$(find packages -name "package.json" -exec grep -l "BSL" {} \; 2>/dev/null || true)
          if [ -n "$BSL_PACKAGES" ]; then
            echo "‚ùå ERROR: Found BSL-licensed packages:"
            echo "$BSL_PACKAGES"
            exit 1
          fi
          
          # Check TypeScript/JavaScript source files for BSL headers
          BSL_SOURCE=$(find packages apps -name "*.ts" -o -name "*.js" -o -name "*.rs" | xargs grep -l "Business Source License\|BSL-1.1" 2>/dev/null || true)
          if [ -n "$BSL_SOURCE" ]; then
            echo "‚ùå ERROR: Found BSL license headers in source files:"
            echo "$BSL_SOURCE"
            exit 1
          fi
          
          # Check for BSL LICENSE files
          BSL_LICENSE=$(find packages -name "LICENSE" -exec grep -l "Business Source License" {} \; 2>/dev/null || true)
          if [ -n "$BSL_LICENSE" ]; then
            echo "‚ùå ERROR: Found BSL LICENSE files:"
            echo "$BSL_LICENSE"
            exit 1
          fi
          
          echo "‚úÖ No BSL references found in source code"

      # Verify all packages are Apache-2.0 (handle missing packages gracefully)
      - name: Verify package licenses
        run: |
          echo "üìã Checking package licenses..."
          
          # Check if packages directory exists
          if [ ! -d "packages" ]; then
            echo "‚ö†Ô∏è No packages directory found - skipping package license check"
            exit 0
          fi
          
          # Find all package.json files and check them
          PACKAGE_COUNT=0
          find packages -name "package.json" 2>/dev/null | while read pkg; do
            if [ -f "$pkg" ]; then
              echo "Processing: $pkg"
          
              # Use more robust Node.js execution with error handling
              LICENSE_OUTPUT=$(node -e "
                try {
                  const pkg = require('./$pkg');
                  console.log(JSON.stringify({name: pkg.name || 'unknown', license: pkg.license || 'unknown'}));
                } catch (error) {
                  console.log(JSON.stringify({name: 'unknown', license: 'error', error: error.message}));
                }
              " 2>/dev/null)
          
              if [ $? -eq 0 ]; then
                # Parse JSON output
                NAME=$(echo "$LICENSE_OUTPUT" | node -e "
                  const stdin = process.stdin;
                  let data = '';
                  stdin.on('readable', () => {
                    let chunk = stdin.read();
                    if (chunk !== null) data += chunk;
                  });
                  stdin.on('end', () => {
                    try {
                      const obj = JSON.parse(data);
                      console.log(obj.name);
                    } catch (e) { console.log('unknown'); }
                  });
                ")
          
                LICENSE=$(echo "$LICENSE_OUTPUT" | node -e "
                  const stdin = process.stdin;
                  let data = '';
                  stdin.on('readable', () => {
                    let chunk = stdin.read();
                    if (chunk !== null) data += chunk;
                  });
                  stdin.on('end', () => {
                    try {
                      const obj = JSON.parse(data);
                      console.log(obj.license);
                    } catch (e) { console.log('unknown'); }
                  });
                ")
          
                # Check license (skip root package)
                if [ "$LICENSE" != "Apache-2.0" ] && [ "$NAME" != "@private-landing/root" ] && [ "$NAME" != "unknown" ]; then
                  echo "‚ùå ERROR: Package $NAME has license: $LICENSE (expected Apache-2.0)"
                  exit 1
                fi
          
                echo "‚úÖ $NAME: $LICENSE"
                PACKAGE_COUNT=$((PACKAGE_COUNT + 1))
              else
                echo "‚ö†Ô∏è Could not read package: $pkg"
              fi
            fi
          done
          
          # Verify we found some packages
          if [ $PACKAGE_COUNT -eq 0 ]; then
            echo "‚ö†Ô∏è No valid packages found to check"
          else
            echo "‚úÖ Checked $PACKAGE_COUNT packages - all Apache-2.0 compliant"
          fi

      # Stricter FOSSA scan for foundation
      - name: FOSSA Analysis
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          run-tests: false

      # Fail hard on any license violations
      - name: FOSSA Test (Strict)
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          run-tests: true
        # Don't allow failures on archive branch
        continue-on-error: false

      # Create issue if weekly scan fails
      - name: Create issue on weekly scan failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = `
            ## üö® Archive Branch License Compliance Issue

            The weekly license compliance scan for the \`archive/cloudflare-launchpad\` branch has detected issues.

            ### What this means:
            - Dependencies may have changed licenses
            - New transitive dependencies might have incompatible licenses
            - The archive branch may no longer be enterprise-safe

            ### Immediate actions needed:
            1. Review the FOSSA dashboard: https://app.fossa.com/projects/git%2Bgithub.com%2F${{ github.repository }}?ref=archive%2Fcloudflare-launchpad
            2. Check \`bun install\` logs for any dependency changes
            3. Update \`.fossa.yml\` policies if needed
            4. Consider pinning problematic dependencies

            ### Impact:
            ‚ö†Ô∏è **The Cloudflare Launchpad foundation may not be safe for enterprise use until this is resolved.**

            CC: @${github.repository_owner}
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Archive Branch License Compliance Failure',
              body: issueBody,
              labels: ['license-compliance', 'archive-branch', 'urgent']
            });

      - name: Archive validation summary
        if: success()
        run: |
          echo "üéâ Archive branch validation complete!"
          echo "‚úÖ No BSL packages in packages/ directory"
          echo "‚úÖ No BSL license headers in source code"  
          echo "‚úÖ All packages Apache-2.0 compliant"
          echo "‚úÖ Dependencies license compliant"
          echo "‚úÖ Ready for enterprise use"